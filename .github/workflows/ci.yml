name: ci
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:
    branches: [main]
  workflow_call:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}

permissions: {}

jobs:
  nix-check:
    runs-on: macos-latest
    permissions:
      actions: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      # - uses: DeterminateSystems/flake-checker-action@v4

      # - uses: DeterminateSystems/nix-installer-action@e50d5f73bfe71c2dd0aa4218de8f4afa59f8f81d # v16
      #   with:
      #     determinate: true
      # - uses: cachix/install-nix-action@08dcb3a5e62fa31e2da3d490afc4176ef55ecd72 # v30
      #   with:
      #     github_access_token: ${{ github.token }}
      - uses: nixbuild/nix-quick-install-action@25aff27c252e0c8cdda3264805f7b6bcd92c8718 # v29

      - uses: nix-community/cache-nix-action@8351fb9f51c580c96c509987ebb99e38aed956ce # v5
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - uses: cachix/cachix-action@ad2ddac53f961de1989924296a1f236fcfbaa4fc # v15
        with:
          name: cachix
          extraPullNames: nix-community,nixpkgs-unfree

      - run: nix flake check

      - run: nix fmt

      - uses: tj-actions/verify-changed-files@6ed7632824d235029086612d4330d659005af687 # v20
        id: verify-changed-files

      - name: files changed
        if: ${{ steps.verify-changed-files.outputs.files_changed == 'true' }}
        env:
          FILES_CHANGED: ${{ steps.verify-changed-files.outputs.changed_files }}
        run: |
          echo "::error::files changed: ${FILES_CHANGED}"
          exit 1

  megalinter:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - id: megalinter
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/latest/flavors/
        uses: oxsecurity/megalinter@ec124f7998718d79379a3c5b39f5359952baf21d # v8
        env:
          # All available variables are described in documentation
          # https://megalinter.io/latest/configuration/
          APPLY_FIXES: all
          DISABLE_LINTERS: JSON_JSONLINT,SPELL_CSPELL
          FAIL_IF_UPDATED_SOURCES: true
          GITHUB_STATUS_REPORTER: true
          GITHUB_TOKEN: ${{ github.token }}
          PYTHON_DEFAULT_STYLE: ruff
          SARIF_REPORTER: true
          VALIDATE_ALL_CODEBASE: false

      - if: ${{ success() || failure() }}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        with:
          name: megalinter-reports
          path: |
            megalinter-reports
            mega-linter.log

      - if: ${{ success() || failure() }}
        uses: github/codeql-action/upload-sarif@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0 # v3
        with:
          sarif_file: megalinter-reports/megalinter-report.sarif

      - name: commit changes
        if: ${{ failure() && steps.megalinter.outputs.has_updated_sources == 1 && github.event_name == 'pull_request' }}
        env:
          BRANCH_NAME: ${{ github.head_ref }}
          COMMIT_MESSAGE: "fix: apply megalinter fixes"
          # https://api.github.com/users/megalinter-bot
          GITHUB_ACTOR: megalinter-bot
          GITHUB_ACTOR_ID: 129584137
        run: |
          git config user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@@users.noreply.github.com"
          git config user.name "${GITHUB_ACTOR}"
          git commit --all --message "${COMMIT_MESSAGE}"
          git push origin "HEAD:${BRANCH_NAME}"

  context:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Dump GitHub script context
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: console.log(context)

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}"

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "${JOB_CONTEXT}"

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "${STEPS_CONTEXT}"

      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "${RUNNER_CONTEXT}"

      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "${STRATEGY_CONTEXT}"

      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "${MATRIX_CONTEXT}"

      - name: Dump environment variables
        run: ${{ (runner.os == 'Windows') && 'gci env:' || 'env | sort' }}
