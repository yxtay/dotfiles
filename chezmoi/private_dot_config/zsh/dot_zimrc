#!/usr/bin/env zsh
# Start configuration added by Zim install
#
# This is not sourced during shell startup, and it's only used to configure the
# zimfw plugin manager.
#

zmodule-custom() {
  local zcommand zname ztarget
  local -a zargs
  zcommand=${1}
  zname=custom/${zcommand}
  shift
  while (( # > 0 )); do
    case ${1} in
      --name)
        shift
        zname=${1}
        ;;
      --if)
        shift
        zargs+=(--if "(( \${+commands[${zcommand}]} )) && ${1}")
        ;;
      --if-command)
        shift
        zargs+=(--if "(( \${+commands[${zcommand}]} && \${+commands[${1}]} ))")
        ;;
      --if-ostype)
        shift
        zargs+=(--if "(( \${+commands[${zcommand}]} )) && [[ \${OSTYPE} == ${1} ]]")
        ;;
      --on-pull)
        shift
        zargs+=(--on-pull ${1})
        ;;
      -d|--disabled)
        zargs+=(--disabled)
        ;;
      -f|--fpath)
        shift
        zargs+=(--fpath ${1})
        ;;
      -a|--autoload)
        shift
        zargs+=(--autoload ${1})
        ;;
      -s|--source)
        shift
        zargs+=(--source ${1})
        ;;
      -c|--cmd)
        shift
        zargs+=(--cmd ${1})
        ;;
      --comp)
        shift
        ztarget=functions/_${1//[^[:IDENT:]]/-}
        zargs+=(--on-pull "mkdir functions")
        zargs+=(--fpath functions)
        zargs+=(--cmd "if [[ ! {}/${ztarget} -nt \${commands[${zcommand}]} ]]; then ${1} >! {}/${ztarget}; fi")
        zargs+=(--cmd "if (( \${+_comps} && ! \${+_comps[${zcommand}]} )); then autoload -Uz ${ztarget:t}; _comps[${zcommand}]=${ztarget:t}; fi")
        ;;
      --eval)
        shift
        ztarget=${1//[^[:IDENT:]]/-}.zsh
        zargs+=(--cmd "if [[ ! {}/${ztarget} -nt \${commands[${zcommand}]} ]]; then ${1} >! {}/${ztarget}; zcompile -UR {}/${ztarget}; fi")
        zargs+=(--source ${ztarget})
        ;;
      *)
        print "Unknown zmodule option ${1}"
        return 2
        ;;
    esac
    shift
  done

  zmodule custom-${zcommand} --name ${zname} --use mkdir --if-command ${zcommand} ${zargs}
}

comps=(
  chezmoi "chezmoi completion zsh"
  codefresh "codefresh completion zsh"
  databricks "databricks completion zsh"
  delta "delta --generate-completion zsh"
  devbox "devbox completion zsh"
  docker "docker completion zsh"
  fd "fd --gen-completions zsh"
  gh "gh completion -s zsh"
  git-lfs "git-lfs completion zsh"
  helm "helm completion zsh"
  kind "kind completion zsh"
  kubectl "kubectl completion zsh"
  mise "mise completion zsh"
  pip "pip completion --zsh"
  podman "podman completion zsh"
  poetry "poetry completions zsh"
  process-compose "process-compose completion zsh"
  rg "rg --generate complete-zsh"
  ruff "ruff generate-shell-completion zsh"
  rustup "rustup completions zsh"
  uv "uv generate-shell-completion zsh"
  uvx "uvx --generate-shell-completion zsh"
  wezterm "wezterm shell-completion --shell zsh"
)

evals=(
  brew "brew shellenv"
  direnv "direnv hook zsh"
  fzf "fzf --zsh"
  mcfly "mcfly init zsh"
  mcfly-fzf "mcfly-fzf init zsh"
  mise "mise activate zsh"
  starship "starship init zsh"
  thefuck "thefuck --alias"
  zoxide "zoxide init zsh"
)

#
# Prompt
#

zmodule romkatv/powerlevel10k --if '[[ -z $1 ]]'
# Exposes to prompts how long the last command took to execute, used by asciiship.
# zmodule duration-info
# Exposes git repository status information to prompts, used by asciiship.
# zmodule git-info
# A heavily reduced, ASCII-only version of the Spaceship and Starship prompts.
# zmodule asciiship

#
# Modules
#

# Sets sane Zsh built-in environment options.
# zmodule environment --if '[[ -z $1 ]]'
# setops
zmodule sorin-ionescu/prezto --root modules/environment --if '[[ -z $1 ]]' --no-submodules
zmodule sorin-ionescu/prezto --root modules/editor --if '[[ -z $1 ]]'
zmodule sorin-ionescu/prezto --root modules/history --if '[[ -z $1 ]]'
zmodule sorin-ionescu/prezto --root modules/directory --if '[[ -z $1 ]]'
zmodule zshzoo/compstyle --if '[[ -z $1 ]]'
# defer
zmodule romkatv/zsh-defer --fpath . --autoload zsh-defer --if '[[ -z $1 ]]'
# prezto
zmodule sorin-ionescu/prezto --root modules/terminal --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/spectrum --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/archive --if '[[ $1 == "defer" ]]'
# Applies correct bindkeys for input events.
# zmodule input --if '[[ $1 == "defer" ]]'
# Sets a custom terminal title.
# zmodule termtitle --if '[[ $1 == "defer" ]]'
# Utility aliases and functions. Adds colour to ls, grep and less.
zmodule utility --if '[[ $1 == "defer" ]]'
# Provides handy git aliases and functions.
zmodule git --if '[[ $1 == "defer" ]]'
zmodule run-help --if '[[ $1 == "defer" ]]'
# command utilities
zmodule direnv --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/dnf --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/docker --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/dpkg --if '[[ $1 == "defer" ]]'
zmodule exa --if '[[ $1 == "defer" ]]'
zmodule homebrew --if '[[ $1 == "defer" ]]'
zmodule k --if '(( ${+commands[kubectl]} )) && [[ $1 == "defer" ]]'
zmodule macports --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/pacman --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/tmux --if '[[ $1 == "defer" ]]'
zmodule sorin-ionescu/prezto --root modules/yum --if '[[ $1 == "defer" ]]'
# fzf related
zmodule junegunn/fzf-git.sh --name fzf-git --if '[[ $1 == "defer" ]]'
zmodule wfxr/forgit --fpath completions --source forgit.plugin.zsh --if '[[ $1 == "defer" ]]'
# use aliases
zmodule MichaelAquilina/zsh-you-should-use --if '[[ $1 == "defer" ]]'

#
# Completion
#

# cache completions and evals
for name cmd in ${comps}; do
  zmodule-custom ${name} --comp "${cmd}" --if '[[ $1 == "defer" ]]'
done
for name cmd in ${evals}; do
  zmodule-custom ${name} --eval "${cmd}" --if '[[ $1 == "defer" ]]'
done
# local functions
zmodule ${ZDOTDIR} --if '[[ $1 == "defer" ]]'
# Additional completion definitions for Zsh.
zmodule zsh-users/zsh-completions --fpath src --if '[[ $1 == "defer" ]]'
# Enables and configures smart and extensive tab completion.
# completion must be sourced after all modules that add completion definitions.
zmodule completion --if '[[ $1 == "defer" ]]'

#
# Modules that must be initialized last
#

# fzf-tab, after completion, before syntax highlighting
zmodule Aloxaf/fzf-tab --fpath lib --source fzf-tab.plugin.zsh --if-command fzf --if '[[ $1 == "defer" ]]'
zmodule Freed-Wu/fzf-tab-source --source fzf-tab-source.plugin.zsh --if-command fzf --if '[[ $1 == "defer" ]]'
# Fish-like syntax highlighting for Zsh.
# syntax-highlighting must be sourced after completion
# zmodule zsh-users/zsh-syntax-highlighting
zmodule zdharma-continuum/fast-syntax-highlighting --fpath . --source fast-syntax-highlighting.plugin.zsh --if '[[ $1 == "defer" ]]'
# history-substring-search must be sourced after syntax-highlighting
zmodule zsh-users/zsh-history-substring-search --if '[[ $1 == "defer" ]]'
# autosuggestions, must be last for ZSH_AUTOSUGGEST_MANUAL_REBIND=1
zmodule zsh-users/zsh-autosuggestions --if '[[ $1 == "defer" ]]'
# End configuration added by Zim install
